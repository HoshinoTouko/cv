{"version":3,"sources":["app/images/avatar.png","app/app/AppHeaderMenu.jsx","app/app/AppHeader.jsx","app/app/components/CVBlock.jsx","app/app/AppContent.jsx","app/app/AppLayout.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppHeaderMenu","className","mode","defaultSelectedKeys","Item","key","React","Component","AppHeader","xs","sm","md","CVBlock","renderContent","content","ordered","replace","source","escapeHtml","Array","listItems","map","item","this","props","title","AppContent","size","src","avatar_png","Header","Footer","Content","AppLayout","span","offset","lg","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6EAAAA,EAAOC,QAAU,IAA0B,oC,uTC0B5BC,E,iLARX,OACE,uBAAMC,UAAU,kBAAkBC,KAAK,aAAaC,oBAAqB,CAAC,SAdvE,CACL,sBAAMC,KAAN,CAAWC,IAAI,QAAf,QAGA,sBAAMD,KAAN,CAAWC,IAAI,SAAf,e,GAOwBC,IAAMC,WCGnBC,E,iLAbX,OACE,uBAAKP,UAAU,kBACb,uBAAKQ,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACvB,8CAEF,uBAAKF,GAAI,EAAGC,GAAI,EAAGC,GAAI,IACrB,kBAAC,EAAD,Y,GARcL,IAAMC,W,oECmCfK,G,kNA/BbC,cAAgB,SAACC,EAASC,GACxB,GAAuB,kBAAZD,EAET,OADAA,EAAUA,EAAQE,QAAQ,MAAO,QAAQA,QAAQ,cAAe,IACzD,kBAAC,IAAD,CAAeC,OAAQH,EAASI,YAAY,IAGrD,GAAIJ,aAAmBK,MAAM,CAC3B,IAAMC,EAAYN,EAAQO,KAAI,SAAAC,GAAI,OAAI,wBAAIjB,IAAKiB,GAAO,EAAKT,cAAcS,OACzE,OAAIP,EACK,4BAAKK,GAEP,4BAAKA,GAEd,OAAON,G,wEAGC,IAAD,EAC6BS,KAAKC,MAAjCC,EADD,EACCA,MAAOX,EADR,EACQA,QAASC,EADjB,EACiBA,QAExB,OACE,yBAAKd,UAAU,YACb,4BAAKwB,GACL,4BACA,yBAAKxB,UAAU,oBACZsB,KAAKV,cAAcC,EAASC,S,GAzBjBT,IAAMC,Y,kBCkFbmB,E,iLA/EX,OACE,2BACE,uBAAKf,GAAI,GACP,uBAAQgB,KAAM,IAAKC,IAAKC,OAE1B,uBAAKlB,GAAI,IACP,8CAEF,kBAAC,EAAD,CACEc,MAAM,WACNX,QAAO,koBAWT,kBAAC,EAAD,CACEW,MAAM,aACNX,QAAO,6OAOT,kBAAC,EAAD,CACEW,MAAM,cACNX,QAAO,6PAOT,kBAAC,EAAD,CACEW,MAAM,UACNX,QAAO,ggBAaT,kBAAC,EAAD,CACEW,MAAM,eACNX,QAAO,6TAWT,kBAAC,EAAD,CACEW,MAAM,eACNX,QAAO,gH,GAvEQR,IAAMC,WCFvBuB,E,IAAAA,OAAQC,E,IAAAA,OAAQC,E,IAAAA,QAuBTC,E,iLAlBX,OACE,2BACE,kBAACH,EAAD,CAAQ7B,UAAU,cAChB,kBAAC,EAAD,OAEF,kBAAC+B,EAAD,CAAS/B,UAAU,eACjB,2BACE,uBAAKQ,GAAI,CAACyB,KAAM,GAAIC,OAAQ,GAAIzB,GAAI,CAACwB,KAAM,GAAIC,OAAQ,GAAIxB,GAAI,CAACuB,KAAM,GAAIC,OAAQ,GAAIC,GAAI,CAACF,KAAM,GAAIC,OAAQ,IAC3G,kBAAC,EAAD,SAIN,kBAACJ,EAAD,oB,GAdgBzB,IAAMC,WCEf8B,MARf,WACE,OACE,yBAAKpC,UAAU,OACb,kBAAC,EAAD,QCMcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5bc9ce84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.e34e20dd.png\";","import React from 'react';\r\nimport { Menu } from 'antd';\r\n\r\n\r\nconst menuItems = () => {\r\n  return [\r\n    <Menu.Item key=\"home\">\r\n      Home\r\n    </Menu.Item>,\r\n    <Menu.Item key=\"about\">\r\n      About\r\n    </Menu.Item>\r\n  ];\r\n};\r\n\r\n\r\nclass AppHeaderMenu extends React.Component {\r\n  render() {\r\n    return (\r\n      <Menu className=\"app-header-menu\" mode=\"horizontal\" defaultSelectedKeys={['home']}>\r\n        {menuItems()}\r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppHeaderMenu;","import React from 'react';\r\nimport {Row, Col} from 'antd';\r\nimport AppHeaderMenu from './AppHeaderMenu';\r\n\r\nclass AppHeader extends React.Component {\r\n  render() {\r\n    return (\r\n      <Row className=\"app-header-row\">\r\n        <Col xs={16} sm={16} md={12}>\r\n          <h2>Touko Hoshino</h2>\r\n        </Col>\r\n        <Col xs={8} sm={8} md={12}>\r\n          <AppHeaderMenu />\r\n        </Col>\r\n      </Row>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppHeader;","import React from 'react';\r\nimport {Divider} from 'antd';\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nimport '../styles/CVBlock.less';\r\n\r\n\r\nclass CVBlock extends React.Component {\r\n  renderContent = (content, ordered) => {\r\n    if (typeof content === 'string'){\r\n      content = content.replace(/\\n/g, '\\n\\n').replace(/^\\s+|^\\s+$/g, '');\r\n      return <ReactMarkdown source={content} escapeHtml={false} />;\r\n      // return <p>{content}</p>;\r\n    }\r\n    if (content instanceof Array){\r\n      const listItems = content.map(item => <li key={item}>{this.renderContent(item)}</li>);\r\n      if (ordered) {\r\n        return <ol>{listItems}</ol>;\r\n      }\r\n      return <ul>{listItems}</ul>\r\n    }\r\n    return content;\r\n  };\r\n\r\n  render() {\r\n    const { title, content, ordered } = this.props;\r\n\r\n    return (\r\n      <div className=\"cv-block\">\r\n        <h2>{title}</h2>\r\n        <Divider />\r\n        <div className=\"cv-block-content\">\r\n          {this.renderContent(content, ordered)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CVBlock;","import React from 'react';\r\nimport {Avatar, Col, Divider, Row} from 'antd';\r\n\r\nimport './styles/AppContent.less';\r\nimport CVBlock from './components/CVBlock';\r\nimport avatar_png from '../images/avatar.png';\r\n\r\n\r\nclass AppContent extends React.Component {\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <Col md={8}>\r\n          <Avatar size={160} src={avatar_png} />\r\n        </Col>\r\n        <Col md={16}>\r\n          <h1>Touko Hoshino</h1>\r\n        </Col>\r\n        <CVBlock\r\n          title=\"About Me\"\r\n          content={`\r\nI'm now a **Ph. D. student** at **Future Network Innovation Lab**, Fudan University, **supervised by Y. Chair Prof. Yang Xu**.\r\nMy major is **Cyberspace Security**, and my research area is **Data Center Network**\r\nMy current works are: \r\n- CDN\r\n- Distributed Machine Learning\r\n- Edge Computing \r\nI was an **undergraduate student** at Hongyi Honor College, Wuhan University, majoring in **Computer Science**. I received my **Honor Bachelor's Degree** at Jun. 2020.\r\nI was a **full stack intern** at NineChapter Inc., using **Docker** to develop a code evaluation machine, maintaining the **React** frontend and the **Django** backend.\r\n`}\r\n        />\r\n        <CVBlock\r\n          title=\"Educations\"\r\n          content={`\r\n- **Ph. D. at School of Computer Science and Technology, Fudan University**, Shanghai, China\r\n  Sep. 2020 - Jun. 2025 (estimate)\r\n- **Honor B. S. at Hongyi Honor College, Wuhan University**, Wuhan, China\r\n  Sep. 2016 - Jun. 2020\r\n`}\r\n        />\r\n        <CVBlock\r\n          title=\"Experiences\"\r\n          content={`\r\n- **Research Assistant at FNIL, Fudan University**, research on **CDN and distributed machine learning**.\r\n  2019.10 - 2020.8'\r\n- **Full Stack Intern Developer at Nine Chapter Inc.**, focus on **Docker, Django and React**.\r\n  2018.2 - 2019.11' \r\n`}\r\n        />\r\n        <CVBlock\r\n          title=\"Rewards\"\r\n          content={`\r\n- **Silver Award** at the 2019 CCF Collegiate Computer System & Programming contest (CCSP) \r\n  Oct. 2019\r\n- **Silver Award** at the 2019 ACM-ICPC China Xian National Invitational Programming Contest \r\n  May 2019\r\n- **First prize** at Dora Hacks Summer in Wuhan Hackathon, Dora Hacks \r\n  Jun. 2018\r\n- **Meritorious Winner (Top 6% of 9932 teams)** at MCM/ICM (Problem D), the COMAP\r\n  Feb. 2018\r\n- **Second prize (Top 1% of 800 teams)** at Beauty of Programming 2017, Microsoft Research Asia\r\n  Aug. 2017 \r\n`}\r\n        />\r\n        <CVBlock\r\n          title=\"Scholarships\"\r\n          content={`\r\n- **C-class Scholarship (Top 20% of 36)** in Wuhan University \r\n  2019\r\n- **B-class Outstanding Student (Top 20% of all)** in Wuhan University  \r\n  2019\r\n- **B-class Scholarship (Top 15% of 36)** in Wuhan University  \r\n  2018\r\n- **B-class Outstanding Student (Top 20% of all)** in Wuhan University  \r\n  2018 \r\n`}\r\n        />\r\n        <CVBlock\r\n          title=\"Publications\"\r\n          content={`\r\n- The Best Beautiful Path , Patent of Invention (Substantive reviewing), **Third Author**\r\n  2017 \r\n`}\r\n        />\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppContent;","import React from 'react';\r\nimport AppHeader from './AppHeader';\r\nimport {Col, Layout, Row} from 'antd';\r\nimport './styles/AppHeader.less';\r\nimport AppContent from './AppContent';\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\n\r\nclass AppLayout extends React.Component {\r\n  render() {\r\n    return (\r\n      <Layout>\r\n        <Header className=\"app-header\">\r\n          <AppHeader />\r\n        </Header>\r\n        <Content className=\"app-content\">\r\n          <Row>\r\n            <Col xs={{span: 22, offset: 1}} sm={{span: 22, offset: 1}} md={{span: 18, offset: 3}} lg={{span: 12, offset: 6}} >\r\n              <AppContent/>\r\n            </Col>\r\n          </Row>\r\n        </Content>\r\n        <Footer>Footer</Footer>\r\n      </Layout>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AppLayout;","import React from 'react';\nimport AppLayout from './app/app/AppLayout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppLayout />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}